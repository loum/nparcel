#!/usr/bin/python

import os
import inspect
import signal

import nparcel
from nparcel.utils.log import (log,
                               set_log_level,
                               set_console,
                               rollover)


class MtsDaemon(nparcel.utils.Daemon):
    _config_file = None
    _template_dir = None

    def __init__(self,
                 pidfile,
                 dry=False,
                 config=None,
                 template_dir=None):
        super(MtsDaemon, self).__init__(pidfile=pidfile)

        self.dry = dry
        if config is not None:
            self._config_file = config
        if template_dir is not None:
            self._template_dir = template_dir

    def _start(self, event):
        signal.signal(signal.SIGTERM, self._exit_handler)

        mts = nparcel.Mts(config=self._config_file,
                          template_dir=self._template_dir)
        mts.purge_files(dry=self.dry)
        mts.connect()
        if not self.dry:
            mts.report(dry=self.dry)
        mts.disconnect()


def main():
    config_file = os.path.join(os.path.expanduser('~'),
                                '.nparceld',
                                'npmts.conf')

    based = nparcel.BaseD(config=config_file)
    based.set_command('start')
    script_name = inspect.getfile(inspect.currentframe())
    script_name = os.path.basename(script_name)
    based.set_script_name(script_name)
    based.parser.set_usage('usage: %prog [options]')
    based.parser.add_option('-t', '--template_dir',
                            dest='template_dir',
                            help='location of SQL template files')
    based.check_args()

    if based.options.dry is not None:
        set_console()
    else:
        rollover()

    # Enable detailed logging if required.
    if based.options.verbose == 0:
        set_log_level('INFO')
    else:
        log.info('Logging verbosity set to "DEBUG" level')

    # OK, start processing.
    mts = MtsDaemon(pidfile=based.pidfile,
                    dry=based.dry,
                    config=based.options.config,
                    template_dir=based.options.template_dir)

    based.set_batch(True)
    based.launch_command(mts, script_name)

if __name__ == '__main__':
    main()
