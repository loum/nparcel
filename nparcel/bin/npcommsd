#!/usr/bin/python

import os
import inspect

import nparcel
from nparcel.utils.log import (log,
                               set_console,
                               set_log_level)


def main():
    based = nparcel.BaseD()
    based.parser.add_option('-f', '--file',
                            dest='file',
                            help='file to process inline (start only)')
    based.check_args()

    if based.command != 'start' and based.options.file:
        based.parser.error('invalid option(s) with command "%s"' %
                           based.command)

    if based.command == 'status' or based.options.dry is not None:
        set_console()

    dry = False
    if based.command == 'start':
        dry = based.options.dry is not None
        log.info('Processing dry run %s' % dry)

    # Enable detailed logging if required.
    if based.options.verbose == 0:
        set_log_level('INFO')
    else:
        log.debug('Logging verbosity set to "DEBUG" level')

    # Check if a filename was provided on the command line.
    file = None
    if based.options.file:
        file = based.options.file

    # OK, start processing.
    pidfile = os.path.join(os.path.expanduser('~'),
                           '.nparceld',
                           'npcommsd.pid')
    cd = nparcel.CommsDaemon(pidfile=pidfile,
                             file=file,
                             dry=dry,
                             config=based.options.config)

    script_name = inspect.getfile(inspect.currentframe())
    script_name = os.path.basename(script_name)
    if based.command == 'start':
        if dry:
            print('Starting %s inline ...' % script_name)
            cd._start(cd.exit_event)
        else:
            print('Starting %s as daemon ...' % script_name)
            cd.start()
    elif based.command == 'stop':
        print('Stopping %s ...' % script_name)
        cd.stop()
        print('OK')
    elif based.command == 'status':
        if cd.status():
            print('%s is running with PID %d' % (script_name, cd.pid))
        else:
            print('%s is idle' % script_name)

if __name__ == '__main__':
    main()
