#!/usr/bin/python

import re
import os
import inspect
from optparse import OptionParser

import nparcel
from nparcel.utils.log import log, set_log_level


def main():
    """Nparcel FTP push main sequence.
    """
    usage = "usage: %prog [options]"
    parser = OptionParser(usage=usage)
    parser.set_usage
    parser.add_option("-v", "--verbose",
                      dest="verbose",
                      action="count",
                      default=0,
                      help="raise logging verbosity")
    parser.add_option('-d', '--dry',
                      dest='dry',
                      action='store_true',
                      help='dry run - show what would have been done')
    parser.add_option('-c', '--config',
                      dest='config',
                      help='override default config')
    (options, args) = parser.parse_args()

    # Enable detailed logging if required.
    if options.verbose == 0:
        set_log_level('INFO')
        log.info('Logging verbosity set to "INFO" level')

    # Move files?
    dry = options.dry is not None
    log.info('Processing dry run %s' % dry)

    # Override config.
    config_file = None
    if options.config is not None:
        config_file = options.config

    # Start processing.
    init = nparcel.Init(config_file=config_file)

    script_name = inspect.getfile(inspect.currentframe())
    script_name = os.path.basename(script_name)
    log.info('Starting %s ...' % script_name)
    init.parse_config()

    log.info('Preparing environment in "%s"' % init.base_dir)

    # Copy over the config files.
    log.debug('Unconditionals: "%s"' % str(init.unconditionals))
    r = re.compile('.conf')
    for conf_file in init.unconditionals:
        m = r.search(conf_file)
        if m is not None:
            log.debug('Found unconditional config file "%s"' % conf_file)
            init.copy_file(conf_file,
                           dir='conf',
                           conditional=False,
                           dry=dry)
    for conf_file in init.conditionals:
        m = r.search(conf_file)
        if m is not None:
            log.debug('Found conditional config file "%s"' % conf_file)
            init.copy_file(conf_file,
                           dir='conf',
                           dry=dry)

    # Copy over the template files.
    r = re.compile('.t$')
    for t_file in init.conditionals:
        m = r.search(t_file)
        if m is not None:
            log.debug('Found conditional template file "%s"' % t_file)
            init.copy_file(t_file, dir='templates', dry=dry)

    log.info('Completed %s' % script_name)

if __name__ == '__main__':
    main()
