#!/usr/bin/python

import os
import subprocess
import inspect
import signal
import datetime
import socket

import top
from top.utils.log import (log,
                           rollover)
from top.utils.setter import set_list


class Pids(object):
    """Identify and kill process.
    """

    def __init__(self, process_name=None):
        self._process_name = process_name
        self._procs = []

    @property
    def process_name(self):
        return self._process_name

    @property
    def procs(self):
        return self._procs

    def set_procs(self, value):
        """Set the procs attribute.
        """
        process = self._process_name

        if value is not None:
            process = value

        log.debug('Obtaining process list for "%s"', process)
        procs = subprocess.Popen(["pgrep", "-x", process],
                                 stdout=subprocess.PIPE)

        for proc in procs.stdout:
            self._procs.append(int(proc.rstrip()))

    def check_process(self, name=None):
        """Given a process name, will return its PIDs.

        **Kwargs:**
            *name*: the name of the process to check (overriding the
            :attr:`process_name`

        **Return:**
            list of PIDs associated with process *name* or
            :attr:`process_name`

        """
        process_name_to_check = self.process_name

        if name is not None:
            log.debug('Process name "%s" provided as an argument', name)
            process_name_to_check = name

        pids = []
        if process_name_to_check is None:
            log.error('No process name provided')
        else:
            log.info('Checking process "%s" status ...',
                     process_name_to_check)
            self.set_procs(process_name_to_check)
            pids = None
            if self.procs is not None:
                pids = ', '.join(map(str, self.procs))

            log.info('PIDs for process "%s": %s' % (process_name_to_check,
                                                    pids))

        return pids

    def kill_process(self, pid):
        """Kill process identified by pid.
        """

        log.info('Terminating PID %i', pid)
        os.kill(int(pid), signal.SIGTERM)

        # Check if the process was terminated.
        # If the process does not exist, then os.kill with throw exception.
        try:
            os.kill(int(pid), 0)
            excp_msg = 'Process with PID: %i was not terminated' % pid
            raise Exception(excp_msg)
        except:
            pass


class HealthDaemon(top.DaemonService):
    """Daemoniser facility for the Health() class.

    """
    _emailer = top.Emailer()
    _pid_table = {}
    _headers = ['Process Name', 'PIDs']
    _hostname = socket.gethostname()
    _processes = []

    @property
    def processes(self):
        return self._processes

    @set_list
    def set_processes(self, values=None):
        pass

    def __init__(self, pidfile, dry=False, config=None):
        top.DaemonService.__init__(self,
                                   pidfile=pidfile,
                                   dry=dry,
                                   config=config)

        if self.config is not None:
            self.set_processes(self.config.health_processes)

    def _start(self, event):
        signal.signal(signal.SIGTERM, self._exit_handler)

        for process_name in self.processes:
            p = Pids(process_name)
            p.check_process()
            self._pid_table[process_name] = p.procs

        self.send_email()

    def send_email(self, date_ts=None):
        """Send the health check via email.

        **Kwargs:**
            *date_ts*: :mod:`datetime` object that can override the
            report date and time.

        """
        # Generate the data for the subject line.
        if date_ts is None:
            now = datetime.datetime.now().strftime('%d/%m/%Y %H:%M')
        else:
            now = date_ts.strftime('%d/%m/%Y')
        subject_data = {'date': now,
                        'host': self._hostname}
        subject = self._emailer.get_subject_line(data=subject_data,
                                                 template='health')
        subject = subject.rstrip()

        # Create the e-mail MIME message.
        data = {'pid_table': self.create_table(self._pid_table,
                                               self._headers),
                'date': now}
        mime = self._emailer.create_comms(data=data,
                                          subject=subject,
                                          template='health',
                                          prod=self.prod)
        self._emailer.set_recipients(self.support_emails)
        self._emailer.send(mime_message=mime, dry=self.dry)

    def create_table(self, items, headers=None):
        """Takes a list of *items* and generates string based, variable
        table content that can feed into a static string template.

        **Args:**
            *items*: dictionary of items to present in the table

        **Returns:**
            string-based HTML table construct

        """
        table_str = []
        tr = '<tr style="border:1px solid white">'
        tr_err = '<tr style="border:1px solid white;background-color:#FF8282">'
        th = '<th style="background-color:#D6EBFF">'
        td = '<td style="white-space:nowrap">'

        if headers is not None:
            td_str = ('%s\n    %s%s%s\n    %s%s%s\n%s\n' %
                      (tr,
                       th, '<b>%s</b>' % headers[0], '</th>',
                       th, '<b>%s</b>' % headers[1], '</th>',
                       '</tr>'))
            table_str.append(td_str)

        for process, pids in items.iteritems():
            row = tr
            if not pids:
                row = tr_err
            td_str = ('%s\n    %s%s%s\n    %s%s%s\n%s\n' %
                      (row,
                       td, '<b>%s</b>' % process, '</td>',
                       td, ', '.join(map(str, pids)), '</td>',
                       '</tr>'))
            table_str.append(td_str)

        return "\n".join(table_str)


def main():
    based = top.BaseD()
    script_name = os.path.basename(inspect.getfile(inspect.currentframe()))
    based.parser.set_usage('usage: %prog [options]')
    based.check_args(script_name, command='start')

    if based.options.dry is None:
        rollover()

    config = None
    if based.options.config is not None:
        config = top.HealthB2CConfig(based.options.config)

    # OK, start processing.
    healthd = HealthDaemon(pidfile=based.pidfile,
                           dry=based.dry,
                           config=config)

    based.set_batch(True)
    based.launch_command(healthd, script_name)


if __name__ == '__main__':
    main()
