#!/usr/bin/python

import os
import inspect
import signal

import top
from top.utils.files import gen_digest_path
from top.utils.log import set_console


class PodDaemon(top.DaemonService):
    _current_dir = os.curdir
    _pod = None

    @property
    def current_dir(self):
        return self._current_dir

    def set_current_dir(self, value):
        self._current_dir = value

    @property
    def pod(self):
        return self._pod

    def set_pod(self, value):
        self._pod = value

    def __init__(self, pidfile, dry=True, config=None):
        top.DaemonService.__init__(self,
                                   pidfile=pidfile,
                                   config=config)

    def _start(self, event):
        signal.signal(signal.SIGTERM, self._exit_handler)

        try:
            if self.config.archive_dir is not None:
                self.set_current_dir(self.config.archive_dir)
        except AttributeError, err:
            pass

        digest_path = gen_digest_path(self.pod)
        path = os.path.join(self.current_dir, 'signature', *digest_path)
        print('path: %s' % path)


def main():
    based = top.BaseD()
    script_name = os.path.basename(inspect.getfile(inspect.currentframe()))
    based.parser.set_usage('usage: %prog [options] <POD value>')
    based.check_args(script_name, command='start')

    pod = None
    try:
        pod = based.args.pop(0)
    except IndexError, err:
        based.parser.error('No POD value provided')

    set_console()

    config = None
    if based.options.config is not None:
        config = top.B2CConfig(based.options.config)

    pd = PodDaemon(pidfile=based.pidfile, config=config)
    pd.set_pod(pod)

    # OK, start processing.
    based.set_batch(True)
    based.set_dry(True)
    based.launch_command(pd, script_name)

if __name__ == '__main__':
    main()
