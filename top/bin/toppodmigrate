#!/usr/bin/python

import os
import inspect
import signal

import top
from top.utils.files import (gen_digest_path,
                             move_file)
from top.utils.log import set_console


class PodMigrateDaemon(top.DaemonService):
    _current_dir = os.curdir

    def __init__(self, pidfile, dry=True, config=None):
        top.DaemonService.__init__(self,
                                   pidfile=pidfile,
                                   config=config)

        self.set_dry(dry)

    @property
    def current_dir(self):
        return self._current_dir

    def set_current_dir(self, value):
        self._current_dir = value

    def _start(self, event):
        signal.signal(signal.SIGTERM, self._exit_handler)

        try:
            if self.config.archive_dir is not None:
                self.set_current_dir(self.config.archive_dir)
        except AttributeError, err:
            pass

        path = os.path.join(self.current_dir, 'signature')
        print('POD signature path: %s' % path)

        listing_paths = [os.path.join(path, f) for f in os.listdir(path)]
        files = [f for f in listing_paths if os.path.isfile(f)]

        for file in files:
            fname = os.path.basename(file)
            id = fname.split('.', 1)[0]
            digest_path = gen_digest_path(id)
            target = os.path.join(path, *digest_path)
            target = os.path.join(target, fname)
            move_file(file, target, dry=self.dry)


def main():
    based = top.BaseD()
    script_name = os.path.basename(inspect.getfile(inspect.currentframe()))
    based.parser.set_usage('usage: %prog [options]')
    based.check_args(script_name, command='start')

    set_console()

    config = None
    if based.options.config is not None:
        config = top.B2CConfig(based.options.config)

    pd = PodMigrateDaemon(pidfile=based.pidfile,
                          dry=based.dry,
                          config=config)

    # OK, start processing.
    based.set_batch(True)
    # In this case, we set dry mode to True so that output just goes
    # to STDOUT.
    based.set_dry(True)
    based.launch_command(pd, script_name)

if __name__ == '__main__':
    main()
